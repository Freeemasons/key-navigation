{"version":3,"sources":["Components/List/index.js","Components/App/index.js","serviceWorker.js","index.js"],"names":["List","props","state","currencies","ticker","name","currentIndex","handleLog","console","log","handleListKeyPress","event","maxItems","length","keyCode","setState","listCurrency","this","map","el","i","activeEl","key","className","onKeyDown","tabIndex","Component","App","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAuFeA,G,kBAlFX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAGVC,MAAQ,CACJC,WAAY,CACR,CAAEC,OAAQ,MAAOC,KAAM,SACvB,CAAED,OAAQ,QAASC,KAAM,SACzB,CAAED,OAAQ,OAAQC,KAAM,SAE5BC,aAAc,GAVC,EAcnBC,UAAY,WACRC,QAAQC,IAAI,WAfG,EAkBnBC,mBAAqB,SAACC,GAAU,IAGtBC,EADiB,EAAKV,MAApBC,WACoBU,OAAS,EAKrC,OAFAL,QAAQC,IAAI,gBAAiBE,EAAMG,SAE3BH,EAAMG,SACV,KAAK,GAED,MACJ,KAAK,GAEG,EAAKZ,MAAMI,aAAe,IAC1BE,QAAQC,MACR,EAAKM,UAAS,SAAAb,GAAK,MAAK,CAAEI,aAAcJ,EAAMI,aAAe,OAEjEE,QAAQC,IAAI,EAAKP,MAAMI,cACvBE,QAAQC,IAAI,UACZ,MAEJ,KAAK,GACG,EAAKP,MAAMI,aAAeM,IAC1BJ,QAAQC,IAAI,WAAYG,GACxB,EAAKG,UAAS,SAAAb,GAAK,MAAK,CAAEI,aAAcJ,EAAMI,aAAe,OAGjEE,QAAQC,IAAI,EAAKP,MAAMI,gBA9ChB,E,sEAwDT,IAAD,OAECU,EAAeC,KAAKf,MAAMC,WAAWe,KAAI,SAACC,EAAIC,GAChD,IAAIC,EAAW,EAAKnB,MAAMI,eAAiBc,EAAI,SAAW,GAC1D,OACI,wBAAIE,IAAKH,EAAGd,KAAMkB,UAAS,qBAAgBF,IACtCF,EAAGf,WAMhB,OACI,yBACImB,UAAU,OACVC,UAAWP,KAAKP,mBAChBe,SAAS,KAET,4BACKT,Q,GA7EFU,cCuBJC,MArBf,WACE,OACE,yBAAKJ,UAAU,OACb,gCACE,mCACO,4CADP,wBAGA,uBACEA,UAAU,WACVK,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBASF,kBAAC,EAAD,QCTcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bf9181d6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport './index.css';\nclass List extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    state = {\n        currencies: [\n            { ticker: 'btc', name: 'bitok' },\n            { ticker: 'storm', name: 'storm' },\n            { ticker: 'atom', name: 'atom' },\n        ],\n        currentIndex: 0,\n\n    }\n\n    handleLog = () => {\n        console.log('logged');\n    }\n\n    handleListKeyPress = (event) => {\n        // 13 - enter, 38 - up, 40 - down\n        const { currencies } = this.state;\n        const maxItems = currencies.length - 1;\n\n\n        console.log('event keycode', event.keyCode)\n\n        switch (event.keyCode) {\n            case 13:\n\n                break;\n            case 38:\n\n                if (this.state.currentIndex > 0) {\n                    console.log()\n                    this.setState(state => ({ currentIndex: state.currentIndex - 1 }));\n                }\n                console.log(this.state.currentIndex)\n                console.log('key up')\n                break;\n\n            case 40:\n                if (this.state.currentIndex < maxItems) {\n                    console.log('maxItems', maxItems)\n                    this.setState(state => ({ currentIndex: state.currentIndex + 1 }));\n                }\n\n                console.log(this.state.currentIndex)\n                break;\n\n            default:\n                break;\n\n        }\n    }\n\n\n    render() {\n\n        const listCurrency = this.state.currencies.map((el, i) => {\n            let activeEl = this.state.currentIndex === i ? 'active' : ''\n            return (\n                <li key={el.name} className={`list__item ${activeEl}`}>\n                    {el.ticker}\n                </li>\n            );\n        }\n        )\n\n        return (\n            <div\n                className=\"List\"\n                onKeyDown={this.handleListKeyPress}\n                tabIndex=\"0\"\n            >\n                <ul>\n                    {listCurrency}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default List;\n","import React from 'react';\n\nimport './App.css';\nimport List from '../List'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header >\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <List></List>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./Components/App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}